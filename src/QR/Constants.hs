module QR.Constants
  ( capacities,
    modeIndicator,
    characterCountIndicatorSize,
    totalBits,
    toExponent,
    fromExponent,
    groupsCodeWords,
    errorCorrectionCodeWordsPerBlock,
    remainderBits,
    alignmentPatternLocations,
    alphaNumericValue,
    allowedAlphaNumericValues,
  )
where

import Data.IntMap (IntMap, fromList, (!))
import Data.List (find, foldl')
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import Data.Tuple (swap)
import QR.Types (BitString, CorrectionLevel, Exception (InvalidVersionOrMode), Mode (AlphaNumeric, Byte, Kanji, Numeric), Version)
import Utils (readInt)

-- Returns bit string indicator for the Mode
modeIndicator :: Mode -> BitString
modeIndicator Numeric = "0001"
modeIndicator AlphaNumeric = "0010"
modeIndicator Byte = "0100"
modeIndicator Kanji = "1000"

-- Returns character capacity per Version
capacities :: CorrectionLevel -> Mode -> [(Version, Int)]
capacities correctionLevel mode = do
  let perCorrectionLevel = filter (\c -> c !! 1 == show correctionLevel) rawCapacities
  foldl' (\acc c -> acc ++ [(readInt $ head c, readInt $ c !! (modeIndex mode + 2))]) [] perCorrectionLevel

-- Returns size of character count indicator
characterCountIndicatorSize :: Version -> Mode -> Either Exception Int
characterCountIndicatorSize v m
  | v >= 1 && v <= 9 = Right ([10, 9, 8, 8] !! i)
  | v >= 10 && v <= 26 = Right ([12, 11, 16, 10] !! i)
  | v >= 27 && v <= 40 = Right ([14, 13, 16, 12] !! i)
  | otherwise = Left InvalidVersionOrMode
  where
    i = modeIndex m

-- Returns total number of required bits
totalBits :: Version -> CorrectionLevel -> Either Exception Int
totalBits v cl = do
  case errorCodewordAndBlock v cl of
    Just r -> Right (readInt (r !! 2) * 8)
    Nothing -> Left InvalidVersionOrMode

-- Returns a list of tuples such that (#Groups, #CodeWords per group) per group (1-based)
-- e.g. (groupsCodeWords version cl) !! 0 -> returns groups codeword information for group 1
groupsCodeWords :: Version -> CorrectionLevel -> Either Exception [(Int, Int)]
groupsCodeWords v cl = do
  case errorCodewordAndBlock v cl of
    Just r -> Right [(readInt (r !! 4), readInt (r !! 5)), (readInt (r !! 6), readInt (r !! 7))]
    Nothing -> Left InvalidVersionOrMode

errorCorrectionCodeWordsPerBlock :: Version -> CorrectionLevel -> Either Exception Int
errorCorrectionCodeWordsPerBlock v cl = do
  case errorCodewordAndBlock v cl of
    Just r -> Right (readInt (r !! 3))
    Nothing -> Left InvalidVersionOrMode

remainderBits :: Version -> Int
remainderBits v = readInt (record !! 1)
  where
    v' = show v
    record = fromMaybe ["0", "0"] (find (\i -> head i == v') rawRemainderBits)

alignmentPatternLocations :: Version -> [Int]
alignmentPatternLocations = (Map.!) rawAlignmentPatternLocations

alphaNumericValue :: Char -> Int
alphaNumericValue = (Map.!) rawAlphaNumericValues

allowedAlphaNumericValues :: [Char]
allowedAlphaNumericValues = Map.keys rawAlphaNumericValues

-- Version-Correction, Numeric, AlphaNumeric, Byte, Kanji
rawCapacities :: [[String]]
rawCapacities = map words (lines s)
  where
    s =
      "1 L 41 25 17 10\n\
      \1 M 34 20 14 8\n\
      \1 Q 27 16 11 7\n\
      \1 H 17 10 7 4\n\
      \2 L 77 47 32 20\n\
      \2 M 63 38 26 16\n\
      \2 Q 48 29 20 12\n\
      \2 H 34 20 14 8\n\
      \3 L 127 77 53 32\n\
      \3 M 101 61 42 26\n\
      \3 Q 77 47 32 20\n\
      \3 H 58 35 24 15\n\
      \4 L 187 114 78 48\n\
      \4 M 149 90 62 38\n\
      \4 Q 111 67 46 28\n\
      \4 H 82 50 34 21\n\
      \5 L 255 154 106 65\n\
      \5 M 202 122 84 52\n\
      \5 Q 144 87 60 37\n\
      \5 H 106 64 44 27\n\
      \6 L 322 195 134 82\n\
      \6 M 255 154 106 65\n\
      \6 Q 178 108 74 45\n\
      \6 H 139 84 58 36\n\
      \7 L 370 224 154 95\n\
      \7 M 293 178 122 75\n\
      \7 Q 207 125 86 53\n\
      \7 H 154 93 64 39\n\
      \8 L 461 279 192 118\n\
      \8 M 365 221 152 93\n\
      \8 Q 259 157 108 66\n\
      \8 H 202 122 84 52\n\
      \9 L 552 335 230 141\n\
      \9 M 432 262 180 111\n\
      \9 Q 312 189 130 80\n\
      \9 H 235 143 98 60\n\
      \10 L 652 395 271 167\n\
      \10 M 513 311 213 131\n\
      \10 Q 364 221 151 93\n\
      \10 H 288 174 119 74\n\
      \11 L 772 468 321 198\n\
      \11 M 604 366 251 155\n\
      \11 Q 427 259 177 109\n\
      \11 H 331 200 137 85\n\
      \12 L 883 535 367 226\n\
      \12 M 691 419 287 177\n\
      \12 Q 489 296 203 125\n\
      \12 H 374 227 155 96\n\
      \13 L 1022 619 425 262\n\
      \13 M 796 483 331 204\n\
      \13 Q 580 352 241 149\n\
      \13 H 427 259 177 109\n\
      \14 L 1101 667 458 282\n\
      \14 M 871 528 362 223\n\
      \14 Q 621 376 258 159\n\
      \14 H 468 283 194 120\n\
      \15 L 1250 758 520 320\n\
      \15 M 991 600 412 254\n\
      \15 Q 703 426 292 180\n\
      \15 H 530 321 220 136\n\
      \16 L 1408 854 586 361\n\
      \16 M 1082 656 450 277\n\
      \16 Q 775 470 322 198\n\
      \16 H 602 365 250 154\n\
      \17 L 1548 938 644 397\n\
      \17 M 1212 734 504 310\n\
      \17 Q 876 531 364 224\n\
      \17 H 674 408 280 173\n\
      \18 L 1725 1046 718 442\n\
      \18 M 1346 816 560 345\n\
      \18 Q 948 574 394 243\n\
      \18 H 746 452 310 191\n\
      \19 L 1903 1153 792 488\n\
      \19 M 1500 909 624 384\n\
      \19 Q 1063 644 442 272\n\
      \19 H 813 493 338 208\n\
      \20 L 2061 1249 858 528\n\
      \20 M 1600 970 666 410\n\
      \20 Q 1159 702 482 297\n\
      \20 H 919 557 382 235\n\
      \21 L 2232 1352 929 572\n\
      \21 M 1708 1035 711 438\n\
      \21 Q 1224 742 509 314\n\
      \21 H 969 587 403 248\n\
      \22 L 2409 1460 1003 618\n\
      \22 M 1872 1134 779 480\n\
      \22 Q 1358 823 565 348\n\
      \22 H 1056 640 439 270\n\
      \23 L 2620 1588 1091 672\n\
      \23 M 2059 1248 857 528\n\
      \23 Q 1468 890 611 376\n\
      \23 H 1108 672 461 284\n\
      \24 L 2812 1704 1171 721\n\
      \24 M 2188 1326 911 561\n\
      \24 Q 1588 963 661 407\n\
      \24 H 1228 744 511 315\n\
      \25 L 3057 1853 1273 784\n\
      \25 M 2395 1451 997 614\n\
      \25 Q 1718 1041 715 440\n\
      \25 H 1286 779 535 330\n\
      \26 L 3283 1990 1367 842\n\
      \26 M 2544 1542 1059 652\n\
      \26 Q 1804 1094 751 462\n\
      \26 H 1425 864 593 365\n\
      \27 L 3517 2132 1465 902\n\
      \27 M 2701 1637 1125 692\n\
      \27 Q 1933 1172 805 496\n\
      \27 H 1501 910 625 385\n\
      \28 L 3669 2223 1528 940\n\
      \28 M 2857 1732 1190 732\n\
      \28 Q 2085 1263 868 534\n\
      \28 H 1581 958 658 405\n\
      \29 L 3909 2369 1628 1002\n\
      \29 M 3035 1839 1264 778\n\
      \29 Q 2181 1322 908 559\n\
      \29 H 1677 1016 698 430\n\
      \30 L 4158 2520 1732 1066\n\
      \30 M 3289 1994 1370 843\n\
      \30 Q 2358 1429 982 604\n\
      \30 H 1782 1080 742 457\n\
      \31 L 4417 2677 1840 1132\n\
      \31 M 3486 2113 1452 894\n\
      \31 Q 2473 1499 1030 634\n\
      \31 H 1897 1150 790  486\n\
      \32 L 4686 2840 1952 1201\n\
      \32 M 3693 2238 1538 947\n\
      \32 Q 2670 1618 1112 684\n\
      \32 H 2022 1226 842 518\n\
      \33 L 4965 3009 2068 1273\n\
      \33 M 3909 2369 1628 1002\n\
      \33 Q 2805 1700 1168 719\n\
      \33 H 2157 1307 898 553\n\
      \34 L 5253 3183 2188 1347\n\
      \34 M 4134 2506 1722 1060\n\
      \34 Q 2949 1787 1228 756\n\
      \34 H 2301 1394 958 590\n\
      \35 L 5529 3351 2303 1417\n\
      \35 M 4343 2632 1809 1113\n\
      \35 Q 3081 1867 1283 790\n\
      \35 H 2361 1431 983 605\n\
      \36 L 5836 3537 2431 1496\n\
      \36 M 4588 2780 1911 1176\n\
      \36 Q 3244 1966 1351 832\n\
      \36 H 2524 1530 1051 647\n\
      \37 L 6153 3729 2563 1577\n\
      \37 M 4775 2894 1989 1224\n\
      \37 Q 3417 2071 1423 876\n\
      \37 H 2625 1591 1093 673\n\
      \38 L 6479 3927 2699 1661\n\
      \38 M 5039 3054 2099 1292\n\
      \38 Q 3599 2181 1499 923\n\
      \38 H 2735 1658 1139 701\n\
      \39 L 6743 4087 2809 1729\n\
      \39 M 5313 3220 2213 1362\n\
      \39 Q 3791 2298 1579 972\n\
      \39 H 2927 1774 1219 750\n\
      \40 L 7089 4296 2953 1817\n\
      \40 M 5596 3391 2331 1435\n\
      \40 Q 3993 2420 1663 1024\n\
      \40 H 3057 1852 1273 784\n"

-- EC = Error Correction, B= Block, CW= CodeWords
-- Version, EC, Total #CW, ECCW per B, #B in G1, #CW per G1's B, #B in G2, CW per G2's B
rawErrorCodewordsAndBlock :: [[String]]
rawErrorCodewordsAndBlock = map words (lines s)
  where
    s =
      "1 L 19 7 1 19 0 0\n\
      \1 M 16 10 1 16 0 0\n\
      \1 Q 13 13 1 13 0 0\n\
      \1 H 9 17 1 9 0 0\n\
      \2 L 34 10 1 34 0 0\n\
      \2 M 28 16 1 28 0 0\n\
      \2 Q 22 22 1 22 0 0\n\
      \2 H 16 28 1 16 0 0\n\
      \3 L 55 15 1 55 0 0\n\
      \3 M 44 26 1 44 0 0\n\
      \3 Q 34 18 2 17 0 0\n\
      \3 H 26 22 2 13 0 0\n\
      \4 L 80 20 1 80 0 0\n\
      \4 M 64 18 2 32 0 0\n\
      \4 Q 48 26 2 24 0 0\n\
      \4 H 36 16 4 9 0 0\n\
      \5 L 108 26 1 108 0 0\n\
      \5 M 86 24 2 43 0 0\n\
      \5 Q 62 18 2 15 2 16\n\
      \5 H 46 22 2 11 2 12\n\
      \6 L 136 18 2 68 0 0\n\
      \6 M 108 16 4 27 0 0\n\
      \6 Q 76 24 4 19 0 0\n\
      \6 H 60 28 4 15 0 0\n\
      \7 L 156 20 2 78 0 0\n\
      \7 M 124 18 4 31 0 0\n\
      \7 Q 88 18 2 14 4 15\n\
      \7 H 66 26 4 13 1 14\n\
      \8 L 194 24 2 97 0 0\n\
      \8 M 154 22 2 38 2 39\n\
      \8 Q 110 22 4 18 2 19\n\
      \8 H 86 26 4 14 2 15\n\
      \9 L 232 30 2 116 0 0\n\
      \9 M 182 22 3 36 2 37\n\
      \9 Q 132 20 4 16 4 17\n\
      \9 H 100 24 4 12 4 13\n\
      \10 L 274 18 2 68 2 69\n\
      \10 M 216 26 4 43 1 44\n\
      \10 Q 154 24 6 19 2 20\n\
      \10 H 122 28 6 15 2 16\n\
      \11 L 324 20 4 81 0 0\n\
      \11 M 254 30 1 50 4 51\n\
      \11 Q 180 28 4 22 4 23\n\
      \11 H 140 24 3 12 8 13\n\
      \12 L 370 24 2 92 2 93\n\
      \12 M 290 22 6 36 2 37\n\
      \12 Q 206 26 4 20 6 21\n\
      \12 H 158 28 7 14 4 15\n\
      \13 L 428 26 4 107 0 0\n\
      \13 M 334 22 8 37 1 38\n\
      \13 Q 244 24 8 20 4 21\n\
      \13 H 180 22 12 11 4 12\n\
      \14 L 461 30 3 115 1 116\n\
      \14 M 365 24 4 40 5 41\n\
      \14 Q 261 20 11 16 5 17\n\
      \14 H 197 24 11 12 5 13\n\
      \15 L 523 22 5 87 1 88\n\
      \15 M 415 24 5 41 5 42\n\
      \15 Q 295 30 5 24 7 25\n\
      \15 H 223 24 11 12 7 13\n\
      \16 L 589 24 5 98 1 99\n\
      \16 M 453 28 7 45 3 46\n\
      \16 Q 325 24 15 19 2 20\n\
      \16 H 253 30 3 15 13 16\n\
      \17 L 647 28 1 107 5 108\n\
      \17 M 507 28 10 46 1 47\n\
      \17 Q 367 28 1 22 15 23\n\
      \17 H 283 28 2 14 17 15\n\
      \18 L 721 30 5 120 1 121\n\
      \18 M 563 26 9 43 4 44\n\
      \18 Q 397 28 17 22 1 23\n\
      \18 H 313 28 2 14 19 15\n\
      \19 L 795 28 3 113 4 114\n\
      \19 M 627 26 3 44 11 45\n\
      \19 Q 445 26 17 21 4 22\n\
      \19 H 341 26 9 13 16 14\n\
      \20 L 861 28 3 107 5 108\n\
      \20 M 669 26 3 41 13 42\n\
      \20 Q 485 30 15 24 5 25\n\
      \20 H 385 28 15 15 10 16\n\
      \21 L 932 28 4 116 4 117\n\
      \21 M 714 26 17 42 0 0\n\
      \21 Q 512 28 17 22 6 23\n\
      \21 H 406 30 19 16 6 17\n\
      \22 L 1006 28 2 111 7 112\n\
      \22 M 782 28 17 46 0 0\n\
      \22 Q 568 30 7 24 16 25\n\
      \22 H 442 24 34 13 0 0\n\
      \23 L 1094 30 4 121 5 122\n\
      \23 M 860 28 4 47 14 48\n\
      \23 Q 614 30 11 24 14 25\n\
      \23 H 464 30 16 15 14 16\n\
      \24 L 1174 30 6 117 4 118\n\
      \24 M 914 28 6 45 14 46\n\
      \24 Q 664 30 11 24 16 25\n\
      \24 H 514 30 30 16 2 17\n\
      \25 L 1276 26 8 106 4 107\n\
      \25 M 1000 28 8 47 13 48\n\
      \25 Q 718 30 7 24 22 25\n\
      \25 H 538 30 22 15 13 16\n\
      \26 L 1370 28 10 114 2 115\n\
      \26 M 1062 28 19 46 4 47\n\
      \26 Q 754 28 28 22 6 23\n\
      \26 H 596 30 33 16 4 17\n\
      \27 L 1468 30 8 122 4 123\n\
      \27 M 1128 28 22 45 3 46\n\
      \27 Q 808 30 8 23 26 24\n\
      \27 H 628 30 12 15 28 16\n\
      \28 L 1531 30 3 117 10 118\n\
      \28 M 1193 28 3 45 23 46\n\
      \28 Q 871 30 4 24 31 25\n\
      \28 H 661 30 11 15 31 16\n\
      \29 L 1631 30 7 116 7 117\n\
      \29 M 1267 28 21 45 7 46\n\
      \29 Q 911 30 1 23 37 24\n\
      \29 H 701 30 19 15 26 16\n\
      \30 L 1735 30 5 115 10 116\n\
      \30 M 1373 28 19 47 10 48\n\
      \30 Q 985 30 15 24 25 25\n\
      \30 H 745 30 23 15 25 16\n\
      \31 L 1843 30 13 115 3 116\n\
      \31 M 1455 28 2 46 29 47\n\
      \31 Q 1033 30 42 24 1 25\n\
      \31 H 793 30 23 15 28 16\n\
      \32 L 1955 30 17 115 0 0\n\
      \32 M 1541 28 10 46 23 47\n\
      \32 Q 1115 30 10 24 35 25\n\
      \32 H 845 30 19 15 35 16\n\
      \33 L 2071 30 17 115 1 116\n\
      \33 M 1631 28 14 46 21 47\n\
      \33 Q 1171 30 29 24 19 25\n\
      \33 H 901 30 11 15 46 16\n\
      \34 L 2191 30 13 115 6 116\n\
      \34 M 1725 28 14 46 23 47\n\
      \34 Q 1231 30 44 24 7 25\n\
      \34 H 961 30 59 16 1 17\n\
      \35 L 2306 30 12 121 7 122\n\
      \35 M 1812 28 12 47 26 48\n\
      \35 Q 1286 30 39 24 14 25\n\
      \35 H 986 30 22 15 41 16\n\
      \36 L 2434 30 6 121 14 122\n\
      \36 M 1914 28 6 47 34 48\n\
      \36 Q 1354 30 46 24 10 25\n\
      \36 H 1054 30 2 15 64 16\n\
      \37 L 2566 30 17 122 4 123\n\
      \37 M 1992 28 29 46 14 47\n\
      \37 Q 1426 30 49 24 10 25\n\
      \37 H 1096 30 24 15 46 16\n\
      \38 L 2702 30 4 122 18 123\n\
      \38 M 2102 28 13 46 32 47\n\
      \38 Q 1502 30 48 24 14 25\n\
      \38 H 1142 30 42 15 32 16\n\
      \39 L 2812 30 20 117 4 118\n\
      \39 M 2216 28 40 47 7 48\n\
      \39 Q 1582 30 43 24 22 25\n\
      \39 H 1222 30 10 15 67 16\n\
      \40 L 2956 30 19 118 6 119\n\
      \40 M 2334 28 18 47 31 48\n\
      \40 Q 1666 30 34 24 34 25\n\
      \40 H 1276 30 20 15 61 16"

rawAlignmentPatternLocations :: Map.Map Int [Int]
rawAlignmentPatternLocations = Map.fromList s
  where
    s =
      [ (2, [6, 18]),
        (3, [6, 22]),
        (4, [6, 26]),
        (5, [6, 30]),
        (6, [6, 34]),
        (7, [6, 22, 38]),
        (8, [6, 24, 42]),
        (9, [6, 26, 46]),
        (10, [6, 28, 50]),
        (11, [6, 30, 54]),
        (12, [6, 32, 58]),
        (13, [6, 34, 62]),
        (14, [6, 26, 46, 66]),
        (15, [6, 26, 48, 70]),
        (16, [6, 26, 50, 74]),
        (17, [6, 30, 54, 78]),
        (18, [6, 30, 56, 82]),
        (19, [6, 30, 58, 86]),
        (20, [6, 34, 62, 90]),
        (21, [6, 28, 50, 72, 94]),
        (22, [6, 26, 50, 74, 98]),
        (23, [6, 30, 54, 78, 102]),
        (24, [6, 28, 54, 80, 106]),
        (25, [6, 32, 58, 84, 110]),
        (26, [6, 30, 58, 86, 114]),
        (27, [6, 34, 62, 90, 118]),
        (28, [6, 26, 50, 74, 98, 122]),
        (29, [6, 30, 54, 78, 102, 126]),
        (30, [6, 26, 52, 78, 104, 130]),
        (31, [6, 30, 56, 82, 108, 134]),
        (32, [6, 34, 60, 86, 112, 138]),
        (33, [6, 30, 58, 86, 114, 142]),
        (34, [6, 34, 62, 90, 118, 146]),
        (35, [6, 30, 54, 78, 102, 126, 150]),
        (36, [6, 24, 50, 76, 102, 128, 154]),
        (37, [6, 28, 54, 80, 106, 132, 158]),
        (38, [6, 32, 58, 84, 110, 136, 162]),
        (39, [6, 26, 54, 82, 110, 138, 166]),
        (40, [6, 30, 58, 86, 114, 142, 170])
      ]

rawRemainderBits = map words (lines s)
  where
    s =
      "1 0\n\
      \2 7\n\
      \3 7\n\
      \4 7\n\
      \5 7\n\
      \6 7\n\
      \7 0\n\
      \8 0\n\
      \9 0\n\
      \10 0\n\
      \11 0\n\
      \12 0\n\
      \13 0\n\
      \14 3\n\
      \15 3\n\
      \16 3\n\
      \17 3\n\
      \18 3\n\
      \19 3\n\
      \20 3\n\
      \21 4\n\
      \22 4\n\
      \23 4\n\
      \24 4\n\
      \25 4\n\
      \26 4\n\
      \27 4\n\
      \28 3\n\
      \29 3\n\
      \30 3\n\
      \31 3\n\
      \32 3\n\
      \33 3\n\
      \34 3\n\
      \35 0\n\
      \36 0\n\
      \37 0\n\
      \38 0\n\
      \39 0\n\
      \40 0"

errorCodewordAndBlock v cl = find (\r -> take 2 r == [show v, show cl]) rawErrorCodewordsAndBlock

rawLogTable :: [(Int, Int)]
rawLogTable =
  [ (1, 0),
    (2, 1),
    (3, 25),
    (4, 2),
    (5, 50),
    (6, 26),
    (7, 198),
    (8, 3),
    (9, 223),
    (10, 51),
    (11, 238),
    (12, 27),
    (13, 104),
    (14, 199),
    (15, 75),
    (16, 4),
    (17, 100),
    (18, 224),
    (19, 14),
    (20, 52),
    (21, 141),
    (22, 239),
    (23, 129),
    (24, 28),
    (25, 193),
    (26, 105),
    (27, 248),
    (28, 200),
    (29, 8),
    (30, 76),
    (31, 113),
    (32, 5),
    (33, 138),
    (34, 101),
    (35, 47),
    (36, 225),
    (37, 36),
    (38, 15),
    (39, 33),
    (40, 53),
    (41, 147),
    (42, 142),
    (43, 218),
    (44, 240),
    (45, 18),
    (46, 130),
    (47, 69),
    (48, 29),
    (49, 181),
    (50, 194),
    (51, 125),
    (52, 106),
    (53, 39),
    (54, 249),
    (55, 185),
    (56, 201),
    (57, 154),
    (58, 9),
    (59, 120),
    (60, 77),
    (61, 228),
    (62, 114),
    (63, 166),
    (64, 6),
    (65, 191),
    (66, 139),
    (67, 98),
    (68, 102),
    (69, 221),
    (70, 48),
    (71, 253),
    (72, 226),
    (73, 152),
    (74, 37),
    (75, 179),
    (76, 16),
    (77, 145),
    (78, 34),
    (79, 136),
    (80, 54),
    (81, 208),
    (82, 148),
    (83, 206),
    (84, 143),
    (85, 150),
    (86, 219),
    (87, 189),
    (88, 241),
    (89, 210),
    (90, 19),
    (91, 92),
    (92, 131),
    (93, 56),
    (94, 70),
    (95, 64),
    (96, 30),
    (97, 66),
    (98, 182),
    (99, 163),
    (100, 195),
    (101, 72),
    (102, 126),
    (103, 110),
    (104, 107),
    (105, 58),
    (106, 40),
    (107, 84),
    (108, 250),
    (109, 133),
    (110, 186),
    (111, 61),
    (112, 202),
    (113, 94),
    (114, 155),
    (115, 159),
    (116, 10),
    (117, 21),
    (118, 121),
    (119, 43),
    (120, 78),
    (121, 212),
    (122, 229),
    (123, 172),
    (124, 115),
    (125, 243),
    (126, 167),
    (127, 87),
    (128, 7),
    (129, 112),
    (130, 192),
    (131, 247),
    (132, 140),
    (133, 128),
    (134, 99),
    (135, 13),
    (136, 103),
    (137, 74),
    (138, 222),
    (139, 237),
    (140, 49),
    (141, 197),
    (142, 254),
    (143, 24),
    (144, 227),
    (145, 165),
    (146, 153),
    (147, 119),
    (148, 38),
    (149, 184),
    (150, 180),
    (151, 124),
    (152, 17),
    (153, 68),
    (154, 146),
    (155, 217),
    (156, 35),
    (157, 32),
    (158, 137),
    (159, 46),
    (160, 55),
    (161, 63),
    (162, 209),
    (163, 91),
    (164, 149),
    (165, 188),
    (166, 207),
    (167, 205),
    (168, 144),
    (169, 135),
    (170, 151),
    (171, 178),
    (172, 220),
    (173, 252),
    (174, 190),
    (175, 97),
    (176, 242),
    (177, 86),
    (178, 211),
    (179, 171),
    (180, 20),
    (181, 42),
    (182, 93),
    (183, 158),
    (184, 132),
    (185, 60),
    (186, 57),
    (187, 83),
    (188, 71),
    (189, 109),
    (190, 65),
    (191, 162),
    (192, 31),
    (193, 45),
    (194, 67),
    (195, 216),
    (196, 183),
    (197, 123),
    (198, 164),
    (199, 118),
    (200, 196),
    (201, 23),
    (202, 73),
    (203, 236),
    (204, 127),
    (205, 12),
    (206, 111),
    (207, 246),
    (208, 108),
    (209, 161),
    (210, 59),
    (211, 82),
    (212, 41),
    (213, 157),
    (214, 85),
    (215, 170),
    (216, 251),
    (217, 96),
    (218, 134),
    (219, 177),
    (220, 187),
    (221, 204),
    (222, 62),
    (223, 90),
    (224, 203),
    (225, 89),
    (226, 95),
    (227, 176),
    (228, 156),
    (229, 169),
    (230, 160),
    (231, 81),
    (232, 11),
    (233, 245),
    (234, 22),
    (235, 235),
    (236, 122),
    (237, 117),
    (238, 44),
    (239, 215),
    (240, 79),
    (241, 174),
    (242, 213),
    (243, 233),
    (244, 230),
    (245, 231),
    (246, 173),
    (247, 232),
    (248, 116),
    (249, 214),
    (250, 244),
    (251, 234),
    (252, 168),
    (253, 80),
    (254, 88),
    (255, 175)
  ]

rawAlphaNumericValues = Map.fromList s
  where
    s =
      [ ('0', 0),
        ('1', 1),
        ('2', 2),
        ('3', 3),
        ('4', 4),
        ('5', 5),
        ('6', 6),
        ('7', 7),
        ('8', 8),
        ('9', 9),
        ('A', 10),
        ('B', 11),
        ('C', 12),
        ('D', 13),
        ('E', 14),
        ('F', 15),
        ('G', 16),
        ('H', 17),
        ('I', 18),
        ('J', 19),
        ('K', 20),
        ('L', 21),
        ('M', 22),
        ('N', 23),
        ('O', 24),
        ('P', 25),
        ('Q', 26),
        ('R', 27),
        ('S', 28),
        ('T', 29),
        ('U', 30),
        ('V', 31),
        ('W', 32),
        ('X', 33),
        ('Y', 34),
        ('Z', 35),
        (' ', 36),
        ('$', 37),
        ('%', 38),
        ('*', 39),
        ('+', 40),
        ('-', 41),
        ('.', 42),
        ('/', 43),
        (':', 44)
      ]

exponents :: IntMap Int
exponents = fromList rawLogTable

numbers :: IntMap Int
numbers = fromList (map swap rawLogTable)

toExponent :: Int -> Int
toExponent 0 = 0
toExponent a = exponents ! a

fromExponent :: Int -> Int
fromExponent a = numbers ! a

-- Return the index of mode column in following tables
modeIndex :: Mode -> Int
modeIndex Numeric = 0
modeIndex AlphaNumeric = 1
modeIndex Byte = 2
modeIndex Kanji = 3